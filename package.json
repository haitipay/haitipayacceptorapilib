{
  "name": "haitipayacceptorapilib",
  "version": "0.1.0",
  "description": "# HaitiPay API description  **The HaitiPay platform** is designed to support several types of transactions and payment applications. HaitiPay allows any phone to be used as for electronic transactions, such as bill payment, money transfers to others, point of sale purchases, etc. The HaitiPay platform offers the following features to users: purchase goods and services at their favorite local stores. Unbanked merchants will be able to accept payments and formalize their business transactions.    **HaitiPay electronic wallet:** Anyone with a mobile phone can easily and securely: store, send and spend money using the HaitiPay electronic wallet. The funds are placed in the wallet in different ways, by recharging in cash of the counter at agent locations, by wallet to wallet transfers, by disbursement of wages or by linking it to a bank account. The HaitiPay wallet can be used to pay bills, shop in stores on the web, or transfer money to other users.  > ðŸ’¡ Follow instructions below to request access to this workspace and test the HaitiPay API.  ---  ## Request an invitation to Access the HaitiPay API     Please request an invitation to access the HaitiPay API  by sending an email to [admin@haitipay.com](mailto:admin@haitipay.com)  With your name and company information.    Within 24 hrs you will receive a confirmation that will allow you to access the   HaitiPay workspace.     ## We're Here to Help  It is important we understand the Business Models you want to implement. Get in touch and let us know how we can help.  Contact support at [devsupport@haitipay.com](mailto:devsupport@haitipay.com) to get help from our team.  # Authentication  ## OAuth2 ### Pre-requisites To access the HaitiPay Acceptor API you must have a registered acceptor account on the HaitiPay platform. An API key for this acceptor must be created for you by HaitiPay Administration.  ### Obtaining an Access Token In order to obtain an Access Token, you must `POST`to the URL https://sandbox.haitipay.com/api/acceptor/v1/oauth2/ token using a `Content-type: application/json` header and a JSON body containing the following items:  |                |                         |                        | |----------------|-------------------------------|-----------------------------| |grant_type|string|MUST be `client_credentials`          | |client_id         |string            |the `API key identifier`            | |client_secret        |string|The `API key secret`|  **Request body example**  ```json {  \"grant_type\":\"client_credentials\",  \"client_id\":\"eza9eza21eaz951ea8f2ffs9fgdfsdd3\",  \"client_secret\":\"eb5d1477-0dab-4b36-bc3e-9da6d6cc25ba\" } ```  Calling the URL as described above will yield a response similar to this (actual token cut off with `[...]` for brevity):  ```json { \"token_type\": \"Bearer\", \"expires_in\":59940, \"access_token\":\"eyJ0eXAiOiJKV1Qi0MzI5Oi0MzI5ODDNiMzJj[...]\" } ```  ### Now that you have an Access Token The thus obtained access token must be provided in the HTTP request header `Authorization` for each **API call** prefixed by the word `Bearer` (with the trailing space):  `Authorization: Bearer your_api_token`  ### Access token lifetime The access token has the **same lifetime as a user's session**, with the significant difference that it's lifetime is not extended upon each API action.  Therefore, the access token will expire after it's predefined lifetime has expired, resulting in a HTTP 401 Unauthorized response with the message Access token is invalid.  It is the API consumer's responsibility to detect such response, to obtain a new access token using the process described above, and optionally to issue the failed request anew.",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/username/repository.git"
  },
  "scripts": {
    "lint": "eslint lib",
    "test": "mocha --recursive"
  },
  "author": "Developer Support",
  "bugs": {
    "email": "devsupport@haitipay.com"
  },
  "license": "MIT",
  "devDependencies": {
    "eslint": "^3.18.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.10.3",
    "mocha": "^5.2.0",
    "chai": "^3.5.0"
  },
  "dependencies": {
    "moment": "^2.17.1",
    "request": "^2.55.0"
  },
  "eslintConfig": {
    "extends": "airbnb",
    "env": {
      "commonjs": true,
      "node": true,
      "mocha": true
    },
    "rules": {
      "indent": [
        "error",
        4
      ],
      "no-underscore-dangle": 0,
      "strict": 0,
      "prefer-rest-params": 0
    }
  }
}